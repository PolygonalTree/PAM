var child = require('child_process');
var shell = require('shelljs');
var fs = require('fs');
var path = require('path');
var Console = require('console').Console;

var errorOutput = fs.createWriteStream('./stderr.log');
var output = fs.createWriteStream('./out.log');
var logger = new Console(output, errorOutput);



var Management = function(){

    function initWorkspace(){
        shell.mkdir('-p', process.env.HOME+'/.virtualenv');
        shell.mkdir('-p', process.env.HOME+'/Devel');
        process.env.WORKON_HOME=process.env.HOME+'/.virtualenv';
        process.env.PROJECT_HOME=process.env.HOME+'/Devel';
       }

    function install(appSource, appName, pythonVersion){
        var installSh = child.spawn('sh',['App_installer.sh', appSource, appName,pythonVersion],{
                            cwd: './scripts',
                            env: process.env
                        });
        installSh.stdout.on('data', function (data) {
            logger.log(String(data));
            console.log('out: '+data);
        });
        installSh.stderr.on('data', function (data) {
            console.log('stderr: ' + data);
            logger.log('err: '+data);
        });
        return installSh;
    }

    function uninstall(appName){
        var installSh = child.spawn('sh',['App_uninstaller.sh',appName],{
                            cwd: './scripts',
                            env: process.env
                        });
    }

    function launch(appName){
        var launchedApp = child.spawn('sh',['App_launcher.sh',appName],{
                            cwd: './scripts',
                            env: process.env
                        });
        return launchedApp;

    }

    function listOfApps(){
        var appObj={}
        var list = fs.readdirSync(process.env.WORKON_HOME)
        for (index in list){
            var appName = list[index];
            appObj[appName]={'name':appName,
                         'icon':path.join(process.env.PROJECT_HOME,appName,'/img/icon.ico')
                        }
        }
        return appObj;
    }

    this.install = install;
    this.uninstall = uninstall;
    this.launch = launch;
    this.initWorkspace = initWorkspace;
    this.listOfApps = listOfApps;

}
module.exports = new Management;
